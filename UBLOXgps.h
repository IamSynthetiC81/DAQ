#include <HardwareSerial.h>

#ifndef __GPS_SERIAL__
  #define __GPS_SERIAL__ Serial1
#endif

#ifndef __LOG_STREAM__
  #define __LOG_STREAM__ Serial
#endif

const uint8_t _TIMEOUT_ = 100;

const PROGMEM char COMMAND_SET_UPDATE_RATE_10Hz_RAM[] = {0xB5,0x62, 0x06, 0x8A, 0x0A, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00, 0x21, 0x30, 0x64, 0x00, 0x52, 0xC3};
const PROGMEM char COMMAND_SET_UPDATE_RATE_10Hz_BBR[] = {0xB5,0x62,0x06,0x8A,0x0A,0x00,0x01,0x02,0x00,0x00,0x01,0x00,0x21,0x30,0x64,0x00,0x53,0xCC};
const PROGMEM char COMMAND_SET_VTG_MESSAGE_ONLY_RAM[] = {0xB5,0x62,0x06,0x8A,0x09,0x00,0x01,0x01,0x00,0x00,0x01,0x00,0x74,0x10,0x00,0x20,0xBB};
const PROGMEM char COMMAND_SET_VTG_MESSAGE_ONLY_BBR[] = {0xB5,0x62,0x06,0x8A,0x09,0x00,0x01,0x02,0x00,0x00,0x01,0x00,0x74,0x10,0x00,0x21,0xC3};
const PROGMEM char COMMAND_set_BAUDE_RATE_115200_RAM[] = {0xB5,0x62,0x06,0x8A,0x0C,0x00,0x01,0x01,0x00,0x00,0x01,0x00,0x52,0x40,0x00,0xC2,0x01,0x00,0xF4,0xB1};
const PROGMEM char COMMAND_set_BAUDE_RATE_115200_BBR[] = {0xB5,0x62,0x06,0x8A,0x0C,0x00,0x01,0x02,0x00,0x00,0x01,0x00,0x52,0x40,0x00,0xC2,0x01,0x00,0xF5,0xBC};

const PROGMEM char COMMAND_set_HIGH_CPU_CLOCK[] = {0xB5,0x62,0x06,0x41,0x10,0x00,0x03,0x00,0x05,0x1F,0x79,0xB2,0x0A,0xE5,0x28,0xEF,0x12,0x05,0x9F,0xFF,0xFF,0xFF,0x62,0xFB};

const PROGMEM char COMMAND_MESSAGE_PRECONFIGURATION_RAM[] = {0xB5,0x62,0x06,0x8A,0x45,0x00,0x01,0x01,0x00,0x00,0xCA,0x00,0x91,0x20,0x00,0xBB,0x00,0x91,0x20,0x01,0xB6,0x00,0x91,0x20,0x00,0xC0,0x00,0x91,0x20,0x00,0xD4,0x00,0x91,0x20,0x00,0xC5,0x00,0x91,0x20,0x00,0x01,0x04,0x91,0x20,0x00,0xAC,0x00,0x91,0x20,0x00,0xE8,0x00,0x91,0x20,0x00,0xB1,0x00,0x91,0x20,0x01,0xD9,0x00,0x91,0x20,0x00,0x02,0x00,0x92,0x20,0x00,0x07,0x00,0x92,0x20,0x07,0x9F,0x8A};
const PROGMEM char COMMAND_MESSAGE_PRECONFIGURATION_BBR[] = {0xB5,0x62,0x06,0x8A,0x45,0x00,0x01,0x02,0x00,0x00,0xCA,0x00,0x91,0x20,0x00,0xBB,0x00,0x91,0x20,0x01,0xB6,0x00,0x91,0x20,0x00,0xC0,0x00,0x91,0x20,0x00,0xD4,0x00,0x91,0x20,0x00,0xC5,0x00,0x91,0x20,0x00,0x01,0x04,0x91,0x20,0x00,0xAC,0x00,0x91,0x20,0x00,0xE8,0x00,0x91,0x20,0x00,0xB1,0x00,0x91,0x20,0x01,0xD9,0x00,0x91,0x20,0x00,0x02,0x00,0x92,0x20,0x00,0x07,0x00,0x92,0x20,0x07,0xA0,0xCE};

const PROGMEM char COMMAND_POLL_RESPONSE[] = {0xB5,0x62,0x06,0x8B,0x08,0x00,0x00,0x00,0x00,0x00,0x1F,0x00,0x31,0x10,0xF9,0x7F};

void sendPacket(byte *packet, byte len){
  for (byte i = 0; i < len; i++){
      __GPS_SERIAL__.write(packet[i]);
  }
}

void waitForAck() {
  const PROGMEM uint8_t UBX_ACK_ACK_HEADER[] = {0xB5, 0x62, 0x06, 0x8A};
  uint8_t buffer[10];
  uint8_t index = 0;

  while (Serial1.available()) {                                               // Wait for data to be available on the serial port
    uint8_t byte = Serial1.read();                                            // Read a byte from the serial port
    if (byte == UBX_ACK_ACK_HEADER[index]) {                                  // Check if the byte matches the expected header
      buffer[index++] = byte;                                                 // Byte matches, so add it to the buffer and increment the index
      if (index == sizeof(UBX_ACK_ACK_HEADER)/sizeof(*UBX_ACK_ACK_HEADER)){                               // Check if we've received the complete header
        return true;                                                          // We've received the complete header, so we can stop waiting
      }
    } else {                                                                  // Byte doesn't match, so reset the index and buffer
      index = 0;
      memset(buffer, 0, sizeof(buffer));
    }
  }
  return false;
}

void sendCommand(byte *command, byte len){
  sendPacket(command, len);
  return waitForAck();
}



void initGPS(){
  sendCommand(COMMAND_set_HIGH_CPU_CLOCK,sizeof(COMMAND_set_HIGH_CPU_CLOCK)/sizeof(*COMMAND_set_HIGH_CPU_CLOCK));
  
  sendCommand(COMMAND_MESSAGE_PRECONFIGURATION_RAM,sizeof(COMMAND_MESSAGE_PRECONFIGURATION_RAM)/sizeof(*COMMAND_MESSAGE_PRECONFIGURATION_RAM));
  
  sendCommand(COMMAND_MESSAGE_PRECONFIGURATION_BBR,sizeof(COMMAND_MESSAGE_PRECONFIGURATION_BBR)/sizeof(*COMMAND_MESSAGE_PRECONFIGURATION_BBR));
  
  sendCommand(COMMAND_set_BAUDE_RATE_115200_RAM,sizeof(COMMAND_set_BAUDE_RATE_115200_RAM)/sizeof(*COMMAND_set_BAUDE_RATE_115200_RAM));
  delay(500);
  
  __GPS_SERIAL__.begin(115200);                                                    // Start with new baud rate

  sendCommand(COMMAND_set_BAUDE_RATE_115200_BBR,sizeof(COMMAND_set_BAUDE_RATE_115200_BBR)/sizeof(*COMMAND_set_BAUDE_RATE_115200_BBR));
  
  delay(500);

  __GPS_SERIAL__.flush();                                                          // wait for last transmitted data to be sent 
  __GPS_SERIAL__.begin(115200);                                                    // Start with new baud rate

  sendCommand(COMMAND_SET_UPDATE_RATE_10Hz_RAM,sizeof(COMMAND_SET_UPDATE_RATE_10Hz_RAM)/sizeof(*COMMAND_SET_UPDATE_RATE_10Hz_RAM));
  
  sendCommand(COMMAND_SET_UPDATE_RATE_10Hz_BBR,sizeof(COMMAND_SET_UPDATE_RATE_10Hz_BBR)/sizeof(*COMMAND_SET_UPDATE_RATE_10Hz_BBR));
  
  return sendCommand(COMMAND_POLL_RESPONSE, sizeof(COMMAND_POLL_RESPONSE)/(sizeof(*COMMAND_POLL_RESPONSE)));
  
}
